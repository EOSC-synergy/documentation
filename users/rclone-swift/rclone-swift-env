#!/bin/bash -e

# load common functions
source $(dirname $0)/.common


## Exports: OS_AUTH_TOKEN
get_scoped_token_for_project() {
	### Get a token scoped for the site and project ID
	endPointToken=$(fedcloud endpoint token)
	eval "$endPointToken"
	if [[ -z $OS_TOKEN ]]; then
		echo "Unexpected fedcloud output:\n$endPointToken"
		return 7
	fi

	export OS_AUTH_TOKEN=${OS_TOKEN} # rename so rclone picks up the token
	unset OS_TOKEN
}

check_storage_url() {
	export OS_STORAGE_URL=$(fedcloud openstack --site $EGI_SITE catalog list --json-output \
		| jq -r  '.[].Result[] | select(.Name == "swift") | .Endpoints[] | select(.interface == "public") | .url ')

	if [[ -n $OS_STORAGE_URL ]]
	then
		echo "Found swift endpoint: $OS_STORAGE_URL"
		echo "You can use it with an appropriate rclone config like this:"
		echo "\t\`rclone ls myswift:\` (note the trailing ':')"
	else
		echo "No swift endpoint found."
		echo "You can manually look at available endpoints using:"
		echo "\t\`fedcloud openstack catalog list\`"
	fi
}


check_dependencies || return
# return if the help was displayed
parse_args $*; [[ $? -eq 255 ]] && return 0
assure_args || return
assure_agent_account || return

echo "Setting up rclone environment for VO ${EGI_VO} @ ${EGI_SITE}:"

echo "\tDetermining project id ..."
get_project || return

echo "\tAcquiring scoped token ..."
get_scoped_token_for_project || return

echo "\tSearching swift endpoint ...\n"
check_storage_url
